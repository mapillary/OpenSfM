# Autogenerated by pybind stub generator
# Do not manually edit
# To regenerate:
#   $ buck run //mapillary/opensfm/opensfm/src/bundle:pybundle_stubgen
# @generated

import numpy
import opensfm.pygeometry
from typing import *
__all__  = [
"BundleAdjuster",
"Point",
"RAReconstruction",
"RARelativeMotionConstraint",
"RAShot",
"Reconstruction",
"ReconstructionAlignment",
"RelativeMotion",
"RelativeRotation",
"RelativeSimilarity"
]
class BundleAdjuster:
    def __init__(self) -> None: ...
    def add_absolute_pan(self, arg0: str, arg1: float, arg2: float) -> None: ...
    def add_absolute_position_heatmap(self, arg0: str, arg1: str, arg2: float, arg3: float, arg4: float) -> None: ...
    def add_absolute_roll(self, arg0: str, arg1: float, arg2: float) -> None: ...
    def add_absolute_tilt(self, arg0: str, arg1: float, arg2: float) -> None: ...
    def add_absolute_up_vector(self, arg0: str, arg1: numpy.ndarray, arg2: float) -> None: ...
    def add_camera(self, arg0: str, arg1: opensfm.pygeometry.Camera, arg2: opensfm.pygeometry.Camera, arg3: bool) -> None: ...
    def add_common_position(self, arg0: str, arg1: str, arg2: float, arg3: float) -> None: ...
    def add_heatmap(self, arg0: str, arg1: List[float], arg2: int, arg3: float) -> None: ...
    def add_linear_motion(self, arg0: str, arg1: str, arg2: str, arg3: float, arg4: float, arg5: float) -> None: ...
    def add_point(self, arg0: str, arg1: numpy.ndarray, arg2: bool) -> None: ...
    def add_point_prior(self, arg0: str, arg1: numpy.ndarray, arg2: numpy.ndarray, arg3: bool) -> None: ...
    def add_point_projection_observation(self, arg0: str, arg1: str, arg2: numpy.ndarray, arg3: float) -> None: ...
    def add_reconstruction(self, arg0: str, arg1: bool) -> None: ...
    def add_reconstruction_shot(self, arg0: str, arg1: float, arg2: str) -> None: ...
    def add_relative_motion(self, arg0: RelativeMotion) -> None: ...
    def add_relative_rotation(self, arg0: RelativeRotation) -> None: ...
    def add_relative_similarity(self, arg0: RelativeSimilarity) -> None: ...
    def add_rig_camera(self, arg0: str, arg1: opensfm.pygeometry.Pose, arg2: opensfm.pygeometry.Pose, arg3: bool) -> None: ...
    def add_rig_instance(self, arg0: str, arg1: opensfm.pygeometry.Pose, arg2: Dict[str, str], arg3: Dict[str, str], arg4: bool) -> None: ...
    def add_rig_instance_position_prior(self, arg0: str, arg1: numpy.ndarray, arg2: numpy.ndarray, arg3: str) -> None: ...
    def brief_report(self) -> str: ...
    def full_report(self) -> str: ...
    def get_camera(self, arg0: str) -> opensfm.pygeometry.Camera: ...
    def get_covariance_estimation_valid(self) -> bool: ...
    def get_point(self, arg0: str) -> Point: ...
    def get_reconstruction(self, arg0: str) -> Reconstruction: ...
    def get_rig_camera_pose(self, arg0: str) -> opensfm.pygeometry.Pose: ...
    def get_rig_instance_pose(self, arg0: str) -> opensfm.pygeometry.Pose: ...
    def run(self) -> None: ...
    def set_adjust_absolute_position_std(self, arg0: bool) -> None: ...
    def set_compute_covariances(self, arg0: bool) -> None: ...
    def set_compute_reprojection_errors(self, arg0: bool) -> None: ...
    def set_internal_parameters_prior_sd(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float) -> None: ...
    def set_linear_solver_type(self, arg0: str) -> None: ...
    def set_max_num_iterations(self, arg0: int) -> None: ...
    def set_num_threads(self, arg0: int) -> None: ...
    def set_point_projection_loss_function(self, arg0: str, arg1: float) -> None: ...
    def set_relative_motion_loss_function(self, arg0: str, arg1: float) -> None: ...
    def set_scale_sharing(self, arg0: str, arg1: bool) -> None: ...
    def set_use_analytic_derivatives(self, arg0: bool) -> None: ...
class Point:
    @property
    def id(self) -> str:...
    @property
    def p(self) -> numpy.ndarray:...
    @property
    def reprojection_errors(self) -> Dict[str, numpy.ndarray]:...
    @reprojection_errors.setter
    def reprojection_errors(self, arg0: Dict[str, numpy.ndarray]) -> None:...
class RAReconstruction:
    def __init__(self) -> None: ...
    @property
    def id(self) -> str:...
    @id.setter
    def id(self, arg0: str) -> None:...
    @property
    def rx(self) -> float:...
    @rx.setter
    def rx(self, arg1: float) -> None:...
    @property
    def ry(self) -> float:...
    @ry.setter
    def ry(self, arg1: float) -> None:...
    @property
    def rz(self) -> float:...
    @rz.setter
    def rz(self, arg1: float) -> None:...
    @property
    def scale(self) -> float:...
    @scale.setter
    def scale(self, arg1: float) -> None:...
    @property
    def tx(self) -> float:...
    @tx.setter
    def tx(self, arg1: float) -> None:...
    @property
    def ty(self) -> float:...
    @ty.setter
    def ty(self, arg1: float) -> None:...
    @property
    def tz(self) -> float:...
    @tz.setter
    def tz(self, arg1: float) -> None:...
class RARelativeMotionConstraint:
    def __init__(self, arg0: str, arg1: str, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float) -> None: ...
    def set_scale_matrix(self, arg0: int, arg1: int, arg2: float) -> None: ...
    @property
    def reconstruction(self) -> str:...
    @reconstruction.setter
    def reconstruction(self, arg0: str) -> None:...
    @property
    def rx(self) -> float:...
    @rx.setter
    def rx(self, arg1: float) -> None:...
    @property
    def ry(self) -> float:...
    @ry.setter
    def ry(self, arg1: float) -> None:...
    @property
    def rz(self) -> float:...
    @rz.setter
    def rz(self, arg1: float) -> None:...
    @property
    def shot(self) -> str:...
    @shot.setter
    def shot(self, arg0: str) -> None:...
    @property
    def tx(self) -> float:...
    @tx.setter
    def tx(self, arg1: float) -> None:...
    @property
    def ty(self) -> float:...
    @ty.setter
    def ty(self, arg1: float) -> None:...
    @property
    def tz(self) -> float:...
    @tz.setter
    def tz(self, arg1: float) -> None:...
class RAShot:
    def __init__(self) -> None: ...
    @property
    def id(self) -> str:...
    @id.setter
    def id(self, arg0: str) -> None:...
    @property
    def rx(self) -> float:...
    @rx.setter
    def rx(self, arg1: float) -> None:...
    @property
    def ry(self) -> float:...
    @ry.setter
    def ry(self, arg1: float) -> None:...
    @property
    def rz(self) -> float:...
    @rz.setter
    def rz(self, arg1: float) -> None:...
    @property
    def tx(self) -> float:...
    @tx.setter
    def tx(self, arg1: float) -> None:...
    @property
    def ty(self) -> float:...
    @ty.setter
    def ty(self, arg1: float) -> None:...
    @property
    def tz(self) -> float:...
    @tz.setter
    def tz(self, arg1: float) -> None:...
class Reconstruction:
    def __init__(self) -> None: ...
    def get_scale(self, arg0: str) -> float: ...
    def set_scale(self, arg0: str, arg1: float) -> None: ...
    @property
    def id(self) -> str:...
    @id.setter
    def id(self, arg0: str) -> None:...
class ReconstructionAlignment:
    def __init__(self) -> None: ...
    def add_absolute_position_constraint(self, arg0: str, arg1: float, arg2: float, arg3: float, arg4: float) -> None: ...
    def add_common_camera_constraint(self, arg0: str, arg1: str, arg2: str, arg3: str, arg4: float, arg5: float) -> None: ...
    def add_common_point_constraint(self, arg0: str, arg1: float, arg2: float, arg3: float, arg4: str, arg5: float, arg6: float, arg7: float, arg8: float) -> None: ...
    def add_reconstruction(self, arg0: str, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: bool) -> None: ...
    def add_relative_absolute_position_constraint(self, arg0: str, arg1: str, arg2: float, arg3: float, arg4: float, arg5: float) -> None: ...
    def add_relative_motion_constraint(self, arg0: RARelativeMotionConstraint) -> None: ...
    def add_shot(self, arg0: str, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: bool) -> None: ...
    def brief_report(self) -> str: ...
    def full_report(self) -> str: ...
    def get_reconstruction(self, arg0: str) -> RAReconstruction: ...
    def get_shot(self, arg0: str) -> RAShot: ...
    def run(self) -> None: ...
class RelativeMotion:
    def __init__(self, arg0: str, arg1: str, arg2: str, arg3: str, arg4: numpy.ndarray, arg5: numpy.ndarray, arg6: float) -> None: ...
    def set_scale_matrix(self, arg0: numpy.ndarray) -> None: ...
    @property
    def r(self) -> numpy.ndarray:...
    @r.setter
    def r(self, arg1: numpy.ndarray) -> None:...
    @property
    def reconstruction_i(self) -> str:...
    @reconstruction_i.setter
    def reconstruction_i(self, arg0: str) -> None:...
    @property
    def reconstruction_j(self) -> str:...
    @reconstruction_j.setter
    def reconstruction_j(self, arg0: str) -> None:...
    @property
    def shot_i(self) -> str:...
    @shot_i.setter
    def shot_i(self, arg0: str) -> None:...
    @property
    def shot_j(self) -> str:...
    @shot_j.setter
    def shot_j(self, arg0: str) -> None:...
    @property
    def t(self) -> numpy.ndarray:...
    @t.setter
    def t(self, arg1: numpy.ndarray) -> None:...
class RelativeRotation:
    def __init__(self, arg0: str, arg1: str, arg2: numpy.ndarray) -> None: ...
    def set_scale_matrix(self, arg0: numpy.ndarray) -> None: ...
    @property
    def r(self) -> numpy.ndarray:...
    @r.setter
    def r(self, arg1: numpy.ndarray) -> None:...
    @property
    def shot_i(self) -> str:...
    @shot_i.setter
    def shot_i(self, arg0: str) -> None:...
    @property
    def shot_j(self) -> str:...
    @shot_j.setter
    def shot_j(self, arg0: str) -> None:...
class RelativeSimilarity:
    def __init__(self, arg0: str, arg1: str, arg2: str, arg3: str, arg4: numpy.ndarray, arg5: numpy.ndarray, arg6: float, arg7: float) -> None: ...
    def set_scale_matrix(self, arg0: numpy.ndarray) -> None: ...
    @property
    def scale(self) -> float:...
    @scale.setter
    def scale(self, arg0: float) -> None:...
