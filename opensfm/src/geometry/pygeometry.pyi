# Autogenerated by pybind stub generator
# Do not manually edit
# To regenerate:
#   $ buck run //mapillary/opensfm/opensfm/src/geometry:pygeometry_stubgen
# @generated

import numpy
from typing import *
__all__  = [
"Camera",
"CameraParameters",
"Pose",
"ProjectionType",
"Similarity",
"absolute_pose_n_points",
"absolute_pose_n_points_known_rotation",
"absolute_pose_three_points",
"compute_camera_mapping",
"epipolar_angle_two_bearings_many",
"essential_five_points",
"essential_n_points",
"point_refinement",
"relative_pose_from_essential",
"relative_pose_refinement",
"relative_rotation_n_points",
"triangulate_bearings_dlt",
"triangulate_bearings_midpoint",
"triangulate_two_bearings_midpoint",
"triangulate_two_bearings_midpoint_many",
"BROWN",
"DUAL",
"FISHEYE",
"FISHEYE62",
"FISHEYE624",
"FISHEYE_OPENCV",
"PERSPECTIVE",
"RADIAL",
"SIMPLE_RADIAL",
"SPHERICAL",
"aspect_ratio",
"cx",
"cy",
"focal",
"k1",
"k2",
"k3",
"k4",
"k5",
"k6",
"none",
"p1",
"p2",
"s0",
"s1",
"s2",
"s3",
"transition"
]
class Camera:
    def __copy__(self) -> Camera: ...
    def __deepcopy__(self, arg0: dict) -> Camera: ...
    def __getstate__(self) -> tuple: ...
    def __setstate__(self, arg0: tuple) -> None: ...
    @staticmethod
    def create_brown(arg0: float, arg1: float, arg2: numpy.ndarray, arg3: numpy.ndarray) -> Camera: ...
    @staticmethod
    def create_dual(arg0: float, arg1: float, arg2: float, arg3: float) -> Camera: ...
    @staticmethod
    def create_fisheye(arg0: float, arg1: float, arg2: float) -> Camera: ...
    @staticmethod
    def create_fisheye62(arg0: float, arg1: float, arg2: numpy.ndarray, arg3: numpy.ndarray) -> Camera: ...
    @staticmethod
    def create_fisheye624(arg0: float, arg1: float, arg2: numpy.ndarray, arg3: numpy.ndarray) -> Camera: ...
    @staticmethod
    def create_fisheye_opencv(arg0: float, arg1: float, arg2: numpy.ndarray, arg3: numpy.ndarray) -> Camera: ...
    @staticmethod
    def create_perspective(arg0: float, arg1: float, arg2: float) -> Camera: ...
    @staticmethod
    def create_radial(arg0: float, arg1: float, arg2: numpy.ndarray, arg3: numpy.ndarray) -> Camera: ...
    @staticmethod
    def create_simple_radial(arg0: float, arg1: float, arg2: numpy.ndarray, arg3: float) -> Camera: ...
    @staticmethod
    def create_spherical() -> Camera: ...
    def get_K(self) -> numpy.ndarray: ...
    def get_K_in_pixel_coordinates(self, arg0: int, arg1: int) -> numpy.ndarray: ...
    def get_parameters_map(self) -> Dict[CameraParameters, float]: ...
    def get_parameters_types(self) -> List[CameraParameters]: ...
    def get_parameters_values(self) -> numpy.ndarray: ...
    @staticmethod
    def is_panorama(arg0: str) -> bool: ...
    def normalized_to_pixel_coordinates(self, arg0: numpy.ndarray) -> numpy.ndarray: ...
    def normalized_to_pixel_coordinates_common(self, arg0: int, arg1: int) -> numpy.ndarray: ...
    def normalized_to_pixel_coordinates_many(self, arg0: numpy.ndarray) -> numpy.ndarray: ...
    def normalized_to_pixel_coordinates_many_common(self, arg0: int, arg1: int) -> numpy.ndarray: ...
    def pixel_bearing(self, arg0: numpy.ndarray) -> numpy.ndarray: ...
    def pixel_bearing_many(self, arg0: numpy.ndarray) -> numpy.ndarray: ...
    def pixel_to_normalized_coordinates(self, arg0: numpy.ndarray) -> numpy.ndarray: ...
    def pixel_to_normalized_coordinates_common(self, arg0: int, arg1: int) -> numpy.ndarray: ...
    def pixel_to_normalized_coordinates_many(self, arg0: numpy.ndarray) -> numpy.ndarray: ...
    def pixel_to_normalized_coordinates_many_common(self, arg0: int, arg1: int) -> numpy.ndarray: ...
    def project(self, arg0: numpy.ndarray) -> numpy.ndarray: ...
    def project_many(self, arg0: numpy.ndarray) -> numpy.ndarray: ...
    def set_parameter_value(self, arg0: CameraParameters, arg1: float) -> None: ...
    def set_parameters_values(self, arg0: numpy.ndarray) -> None: ...
    @property
    def aspect_ratio(self) -> float:...
    @aspect_ratio.setter
    def aspect_ratio(self, arg1: float) -> None:...
    @property
    def distortion(self) -> numpy.ndarray:...
    @distortion.setter
    def distortion(self, arg1: numpy.ndarray) -> None:...
    @property
    def focal(self) -> float:...
    @focal.setter
    def focal(self, arg1: float) -> None:...
    @property
    def height(self) -> int:...
    @height.setter
    def height(self, arg0: int) -> None:...
    @property
    def id(self) -> str:...
    @id.setter
    def id(self, arg0: str) -> None:...
    @property
    def k1(self) -> float:...
    @property
    def k2(self) -> float:...
    @property
    def k3(self) -> float:...
    @property
    def k4(self) -> float:...
    @property
    def k5(self) -> float:...
    @property
    def k6(self) -> float:...
    @property
    def p1(self) -> float:...
    @property
    def p2(self) -> float:...
    @property
    def principal_point(self) -> numpy.ndarray:...
    @principal_point.setter
    def principal_point(self, arg1: numpy.ndarray) -> None:...
    @property
    def projection_type(self) -> str:...
    @property
    def s0(self) -> float:...
    @property
    def s1(self) -> float:...
    @property
    def s2(self) -> float:...
    @property
    def s3(self) -> float:...
    @property
    def transition(self) -> float:...
    @transition.setter
    def transition(self, arg1: float) -> None:...
    @property
    def width(self) -> int:...
    @width.setter
    def width(self, arg0: int) -> None:...
class CameraParameters:
    focal: "CameraParameters"
    aspect_ratio: "CameraParameters"
    k1: "CameraParameters"
    k2: "CameraParameters"
    k3: "CameraParameters"
    k4: "CameraParameters"
    k5: "CameraParameters"
    k6: "CameraParameters"
    p1: "CameraParameters"
    p2: "CameraParameters"
    s0: "CameraParameters"
    s1: "CameraParameters"
    s2: "CameraParameters"
    s3: "CameraParameters"
    cx: "CameraParameters"
    cy: "CameraParameters"
    transition: "CameraParameters"
    none: "CameraParameters"
    __members__: Dict[str, "CameraParameters"]
    @property
    def name(self) -> str: ...
class Pose:
    def __copy__(self) -> Pose: ...
    def __deepcopy__(self, arg0: dict) -> Pose: ...
    def __getstate__(self) -> tuple: ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: numpy.ndarray) -> None: ...
    @overload
    def __init__(self, rotation: numpy.ndarray) -> None: ...
    @overload
    def __init__(self, rotation: numpy.ndarray, translation: numpy.ndarray) -> None: ...
    @overload
    def __init__(self, rotation: numpy.ndarray, translation: numpy.ndarray) -> None: ...
    def __setstate__(self, arg0: tuple) -> None: ...
    def compose(self, arg0: Pose) -> Pose: ...
    def get_R_cam_to_world(self) -> numpy.ndarray: ...
    def get_R_cam_to_world_min(self) -> numpy.ndarray: ...
    def get_R_world_to_cam(self) -> numpy.ndarray: ...
    def get_R_world_to_cam_min(self) -> numpy.ndarray: ...
    def get_Rt(self) -> numpy.ndarray: ...
    def get_cam_to_world(self) -> numpy.ndarray: ...
    def get_origin(self) -> numpy.ndarray: ...
    def get_rotation_matrix(self) -> numpy.ndarray: ...
    def get_t_cam_to_world(self) -> numpy.ndarray: ...
    def get_t_world_to_cam(self) -> numpy.ndarray: ...
    def get_world_to_cam(self) -> numpy.ndarray: ...
    def inverse(self) -> Pose: ...
    def is_identity(self, arg0: float) -> bool: ...
    def relative_to(self, arg0: Pose) -> Pose: ...
    @overload
    def set_from_cam_to_world(self, arg0: numpy.ndarray) -> None: ...
    @overload
    def set_from_cam_to_world(self, arg0: numpy.ndarray, arg1: numpy.ndarray) -> None: ...
    @overload
    def set_from_cam_to_world(self, arg0: numpy.ndarray, arg1: numpy.ndarray) -> None: ...
    @overload
    def set_from_world_to_cam(self, arg0: numpy.ndarray) -> None: ...
    @overload
    def set_from_world_to_cam(self, arg0: numpy.ndarray, arg1: numpy.ndarray) -> None: ...
    @overload
    def set_from_world_to_cam(self, arg0: numpy.ndarray, arg1: numpy.ndarray) -> None: ...
    def set_origin(self, arg0: numpy.ndarray) -> None: ...
    def set_rotation_matrix(self, arg0: numpy.ndarray) -> None: ...
    def transform(self, arg0: numpy.ndarray) -> numpy.ndarray: ...
    def transform_inverse(self, arg0: numpy.ndarray) -> numpy.ndarray: ...
    def transform_inverse_many(self, arg0: numpy.ndarray) -> numpy.ndarray: ...
    def transform_many(self, arg0: numpy.ndarray) -> numpy.ndarray: ...
    @property
    def rotation(self) -> numpy.ndarray:...
    @rotation.setter
    def rotation(self, arg1: numpy.ndarray) -> None:...
    @property
    def translation(self) -> numpy.ndarray:...
    @translation.setter
    def translation(self, arg1: numpy.ndarray) -> None:...
class ProjectionType:
    PERSPECTIVE: "ProjectionType"
    BROWN: "ProjectionType"
    FISHEYE: "ProjectionType"
    FISHEYE_OPENCV: "ProjectionType"
    FISHEYE62: "ProjectionType"
    FISHEYE624: "ProjectionType"
    DUAL: "ProjectionType"
    SPHERICAL: "ProjectionType"
    RADIAL: "ProjectionType"
    SIMPLE_RADIAL: "ProjectionType"
    __members__: Dict[str, "ProjectionType"]
    @property
    def name(self) -> str: ...
class Similarity:
    def __init__(self, arg0: numpy.ndarray, arg1: numpy.ndarray, arg2: float) -> None: ...
    def get_rotation_matrix(self) -> numpy.ndarray: ...
    def inverse(self) -> Similarity: ...
    def transform(self, arg0: numpy.ndarray) -> numpy.ndarray: ...
    @property
    def rotation(self) -> numpy.ndarray:...
    @rotation.setter
    def rotation(self, arg1: numpy.ndarray) -> None:...
    @property
    def scale(self) -> float:...
    @scale.setter
    def scale(self, arg1: float) -> None:...
    @property
    def translation(self) -> numpy.ndarray:...
    @translation.setter
    def translation(self, arg1: numpy.ndarray) -> None:...
def absolute_pose_n_points(arg0: numpy.ndarray, arg1: numpy.ndarray) -> numpy.ndarray:...
def absolute_pose_n_points_known_rotation(arg0: numpy.ndarray, arg1: numpy.ndarray) -> numpy.ndarray:...
def absolute_pose_three_points(arg0: numpy.ndarray, arg1: numpy.ndarray) -> List[numpy.ndarray]:...
def compute_camera_mapping(arg0: Camera, arg1: Camera, arg2: int, arg3: int) -> Tuple[numpy.ndarray, numpy.ndarray]:...
def epipolar_angle_two_bearings_many(arg0: numpy.ndarray, arg1: numpy.ndarray, arg2: numpy.ndarray, arg3: numpy.ndarray) -> numpy.ndarray:...
def essential_five_points(arg0: numpy.ndarray, arg1: numpy.ndarray) -> List[numpy.ndarray]:...
def essential_n_points(arg0: numpy.ndarray, arg1: numpy.ndarray) -> List[numpy.ndarray]:...
def point_refinement(arg0: numpy.ndarray, arg1: numpy.ndarray, arg2: numpy.ndarray, arg3: int) -> numpy.ndarray:...
def relative_pose_from_essential(arg0: numpy.ndarray, arg1: numpy.ndarray, arg2: numpy.ndarray) -> numpy.ndarray:...
def relative_pose_refinement(arg0: numpy.ndarray, arg1: numpy.ndarray, arg2: numpy.ndarray, arg3: int) -> numpy.ndarray:...
def relative_rotation_n_points(arg0: numpy.ndarray, arg1: numpy.ndarray) -> numpy.ndarray:...
def triangulate_bearings_dlt(arg0: List[numpy.ndarray], arg1: numpy.ndarray, arg2: float, arg3: float) -> Tuple[bool, numpy.ndarray]:...
def triangulate_bearings_midpoint(arg0: numpy.ndarray, arg1: numpy.ndarray, arg2: List[float], arg3: float) -> Tuple[bool, numpy.ndarray]:...
def triangulate_two_bearings_midpoint(arg0: numpy.ndarray, arg1: numpy.ndarray) -> Tuple[bool, numpy.ndarray]:...
def triangulate_two_bearings_midpoint_many(arg0: numpy.ndarray, arg1: numpy.ndarray, arg2: numpy.ndarray, arg3: numpy.ndarray) -> List[Tuple[bool, numpy.ndarray]]:...
BROWN = ...
DUAL = ...
FISHEYE = ...
FISHEYE62 = ...
FISHEYE624 = ...
FISHEYE_OPENCV = ...
PERSPECTIVE = ...
RADIAL = ...
SIMPLE_RADIAL = ...
SPHERICAL = ...
aspect_ratio = ...
cx = ...
cy = ...
focal = ...
k1 = ...
k2 = ...
k3 = ...
k4 = ...
k5 = ...
k6 = ...
none = ...
p1 = ...
p2 = ...
s0 = ...
s1 = ...
s2 = ...
s3 = ...
transition = ...