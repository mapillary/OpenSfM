# Autogenerated by pybind stub generator
# Do not manually edit
# To regenerate:
#   $ buck run //mapillary/opensfm/opensfm/src/features:pyfeatures_stubgen
# @generated

import numpy
from typing import *
__all__  = [
"AKAZEOptions",
"AkazeDescriptorType",
"AkazeDiffusivityType",
"akaze",
"compute_vlad_descriptor",
"compute_vlad_distances",
"hahog",
"match_using_words"
]
class AKAZEOptions:
    def __init__(self) -> None: ...
    @property
    def derivative_factor(self) -> float:...
    @derivative_factor.setter
    def derivative_factor(self, arg0: float) -> None:...
    @property
    def descriptor(self) -> AkazeDescriptorType:...
    @descriptor.setter
    def descriptor(self, arg0: AkazeDescriptorType) -> None:...
    @property
    def descriptor_channels(self) -> int:...
    @descriptor_channels.setter
    def descriptor_channels(self, arg0: int) -> None:...
    @property
    def descriptor_pattern_size(self) -> int:...
    @descriptor_pattern_size.setter
    def descriptor_pattern_size(self, arg0: int) -> None:...
    @property
    def descriptor_size(self) -> int:...
    @descriptor_size.setter
    def descriptor_size(self, arg0: int) -> None:...
    @property
    def diffusivity(self) -> AkazeDiffusivityType:...
    @diffusivity.setter
    def diffusivity(self, arg0: AkazeDiffusivityType) -> None:...
    @property
    def dthreshold(self) -> float:...
    @dthreshold.setter
    def dthreshold(self, arg0: float) -> None:...
    @property
    def img_height(self) -> int:...
    @img_height.setter
    def img_height(self, arg0: int) -> None:...
    @property
    def img_width(self) -> int:...
    @img_width.setter
    def img_width(self, arg0: int) -> None:...
    @property
    def kcontrast(self) -> float:...
    @kcontrast.setter
    def kcontrast(self, arg0: float) -> None:...
    @property
    def kcontrast_nbins(self) -> int:...
    @kcontrast_nbins.setter
    def kcontrast_nbins(self, arg0: int) -> None:...
    @property
    def kcontrast_percentile(self) -> float:...
    @kcontrast_percentile.setter
    def kcontrast_percentile(self, arg0: float) -> None:...
    @property
    def min_dthreshold(self) -> float:...
    @min_dthreshold.setter
    def min_dthreshold(self, arg0: float) -> None:...
    @property
    def nsublevels(self) -> int:...
    @nsublevels.setter
    def nsublevels(self, arg0: int) -> None:...
    @property
    def omax(self) -> int:...
    @omax.setter
    def omax(self, arg0: int) -> None:...
    @property
    def omin(self) -> int:...
    @omin.setter
    def omin(self, arg0: int) -> None:...
    @property
    def save_keypoints(self) -> bool:...
    @save_keypoints.setter
    def save_keypoints(self, arg0: bool) -> None:...
    @property
    def save_scale_space(self) -> bool:...
    @save_scale_space.setter
    def save_scale_space(self, arg0: bool) -> None:...
    @property
    def sderivatives(self) -> float:...
    @sderivatives.setter
    def sderivatives(self, arg0: float) -> None:...
    @property
    def soffset(self) -> float:...
    @soffset.setter
    def soffset(self, arg0: float) -> None:...
    @property
    def target_num_features(self) -> int:...
    @target_num_features.setter
    def target_num_features(self, arg0: int) -> None:...
    @property
    def use_adaptive_suppression(self) -> bool:...
    @use_adaptive_suppression.setter
    def use_adaptive_suppression(self, arg0: bool) -> None:...
    @property
    def use_isotropic_diffusion(self) -> bool:...
    @use_isotropic_diffusion.setter
    def use_isotropic_diffusion(self, arg0: bool) -> None:...
    @property
    def verbosity(self) -> bool:...
    @verbosity.setter
    def verbosity(self, arg0: bool) -> None:...
class AkazeDescriptorType:
    SURF_UPRIGHT: "AkazeDescriptorType"
    SURF: "AkazeDescriptorType"
    MSURF_UPRIGHT: "AkazeDescriptorType"
    MSURF: "AkazeDescriptorType"
    MLDB_UPRIGHT: "AkazeDescriptorType"
    MLDB: "AkazeDescriptorType"
    __members__: Dict[str, "AkazeDescriptorType"]
    @property
    def name(self) -> str: ...
class AkazeDiffusivityType:
    PM_G1: "AkazeDiffusivityType"
    PM_G2: "AkazeDiffusivityType"
    WEICKERT: "AkazeDiffusivityType"
    CHARBONNIER: "AkazeDiffusivityType"
    __members__: Dict[str, "AkazeDiffusivityType"]
    @property
    def name(self) -> str: ...
def akaze(arg0: numpy.ndarray, arg1: AKAZEOptions) -> tuple:...
def compute_vlad_descriptor(arg0: numpy.ndarray, arg1: numpy.ndarray) -> numpy.ndarray:...
def compute_vlad_distances(arg0: Dict[str, numpy.ndarray], arg1: str, arg2: Set[str]) -> Tuple[List[float], List[str]]:...
def hahog(image: numpy.ndarray, peak_threshold: float = 0.003, edge_threshold: float = 10, target_num_features: int = 0, use_adaptive_suppression: bool = False) -> tuple:...
def match_using_words(arg0: numpy.ndarray, arg1: numpy.ndarray, arg2: numpy.ndarray, arg3: numpy.ndarray, arg4: float, arg5: int) -> numpy.ndarray:...
