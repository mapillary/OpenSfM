#!/usr/bin/env python2
import os.path, sys
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))

import numpy as np
from itertools import combinations
import argparse
import networkx as nx
from opensfm import dataset
from opensfm import features
import logging

logging.basicConfig(format='%(asctime)s %(message)s', level=logging.DEBUG)



def good_track(track, min_length):
    if len(track) < min_length:
        return False
    images = [f[0] for f in track]
    if len(images) != len(set(images)):
        return False
    return True


parser = argparse.ArgumentParser(description='Create tracks by grouping the robust matches')
parser.add_argument('dataset',
                    help='path to the dataset to be processed')
args = parser.parse_args()


data = dataset.DataSet(args.dataset)
images = data.images()

# Read local features
logging.info('reading features')
feature = {}
for im in images:
    p1, f1 = data.load_features(im)
    feature[im] = p1[:,:2]

logging.info('creating features graph')
g = nx.Graph()
for im1 in images:
    for im2 in images:
        try:
            matches = data.load_matches(im1, im2)
            for f1, f2 in matches:
                g.add_edge((im1, f1),  (im2, f2))
        except IOError:
            pass

logging.info('finding connected components')
tracks = nx.connected_components(g)

tracks = [t for t in tracks if good_track(t, data.config.get('min_track_length', 2))]
logging.info('Good tracks: %d', len(tracks))

tracks_graph = nx.Graph()
for track_id, track in enumerate(tracks):
    for image_feature in track:
        image = image_feature[0]
        featureid = image_feature[1]
        x, y = feature[image][featureid]
        tracks_graph.add_node(image, bipartite=0)
        tracks_graph.add_node(track_id, bipartite=1)
        tracks_graph.add_edge(image, track_id, feature=(x,y), feature_id=featureid)

data.save_tracks_graph(tracks_graph)
