#!/usr/bin/env python2
import os.path, sys
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))

import argparse
import time
import json
import numpy as np
import scipy.spatial
from opensfm import dataset
from opensfm import reconstruction

if __name__ == "__main__":
    start = time.time()
    parser = argparse.ArgumentParser(description='Add delaunay mesh to the reconstruction')
    parser.add_argument('dataset',
                        help='path to the dataset to be processed')
    args = parser.parse_args()

    data = dataset.DataSet(args.dataset)
    graph = data.load_tracks_graph()
    reconstructions = data.load_reconstruction()

    for r in reconstructions:
        for shot_id, shot in r['shots'].items():
            if shot_id not in graph:
                continue
            cam = r['cameras'][shot['camera']]
            dx = float(cam['width']) / 2 / max(cam['width'], cam['height'])
            dy = float(cam['height']) / 2 / max(cam['width'], cam['height'])
            pixels = [[-dx, -dy], [-dx, dy], [dx, dy], [dx, -dy]]
            vertices = [None for i in range(4)]
            for track_id, edge in graph[shot_id].items():
                if track_id in r['points']:
                    point = r['points'][track_id]
                    vertices.append(point['coordinates'])
                    pixel = reconstruction.reproject(cam, shot, point)
                    pixels.append(pixel.tolist())

            tri = scipy.spatial.Delaunay(pixels)

            sums = [0.,0.,0.,0.]
            depths = [0.,0.,0.,0.]
            for t in tri.simplices:
                for i in range(4):
                    if i in t:
                        for j in t:
                            if j >= 4:
                                depths[i] += reconstruction.camera_coordinates(cam, shot, vertices[j])[2]
                                sums[i] += 1
            for i in range(4):
                vertices[i] = reconstruction.back_project(cam, shot, pixels[i], depths[i] / sums[i]).tolist()

            faces = tri.simplices.tolist()
            r['shots'][shot_id]['vertices'] = vertices
            r['shots'][shot_id]['faces'] = faces

    data.save_reconstruction(reconstructions, filename='reconstruction.meshed.json')

    end = time.time()
    with open(data.profile_log(), 'a') as fout:
        fout.write('mesh: {0}\n'.format(end - start))
