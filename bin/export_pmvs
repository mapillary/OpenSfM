#!/usr/bin/env python2
import os.path, sys
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))
import argparse

import cv2
import json
import numpy as np

import opensfm.dataset as dataset
import opensfm.io as io
from opensfm.reconstruction import *



### Prepare OpenSfM output for dense reconstruction with PMVS

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Convert output from OpenSfM to PMVS')
    parser.add_argument('dataset', help='path to the dataset to be processed')
    parser.add_argument('--output', help='output pmvs directory')
    args = parser.parse_args()

    data = dataset.DataSet(args.dataset)
    base_output_path = args.output
    if base_output_path is None:
        base_output_path = os.path.join(os.path.dirname(args.dataset), 'pmvs')
    print "Converting dataset [%s] to PMVS dir [%s]" % (data.data_path, base_output_path)

    io.mkdir_p(base_output_path)

    # load tracks for vis.dat
    graph = data.load_tracks_graph()
    tracks, images = tracks_and_images(graph)
    image_graph = bipartite.weighted_projected_graph(graph, images)

    reconstructions = data.load_reconstruction()
    for h, reconstruction in enumerate(reconstructions):
        print "Reconstruction", h
        output_path = os.path.join(base_output_path, "pmvs_recon%d" % h)
        io.mkdir_p(output_path)
        io.mkdir_p(os.path.join(output_path, "visualize"))
        io.mkdir_p(os.path.join(output_path, "txt"))
        io.mkdir_p(os.path.join(output_path, "models"))

        shot_index = { image: i for i, image in enumerate(reconstruction["shots"]) }

        fvis = open(os.path.join(output_path, "vis.dat"), "w")
        fvis.write("VISDATA\n")
        fvis.write("%d\n" % len(shot_index))

        for image, i in shot_index.items():
            shot = reconstruction["shots"][image]
            base = "%08d" % i
            print "Image:", image, base

            #### vis.dat for this image
            adj_indices = []
            for adj_image in image_graph[image]:
                weight = image_graph[image][adj_image]["weight"]
                if weight > 0 and adj_image in shot_index:
                    adj_indices.append(shot_index[adj_image])


            num_covisible = len(adj_indices)
            fvis.write("%d " % i)
            fvis.write("%d " % num_covisible)
            for ai in adj_indices:
                fvis.write("%d " % ai)
            fvis.write("\n")


            #### write camera projection matrix to txt/%08d.txt
            camera = reconstruction['cameras'][shot['camera']]

            focal = camera["focal"]
            w = camera["width"]
            h = camera["height"]

            # build that projection matrix that PMVS actually accepts!
            Rt = Rt_from_shot(shot)
            K = np.matrix([[focal*w, 0, 0.5*w], [0, focal*h, 0.5*h], [0, 0, 1.0]])
            P = K*Rt

            new_txt = os.path.join(output_path, "txt", base + ".txt")
            with open(new_txt, "w") as f:
                f.write("CONTOUR\n")
                for r in np.array(P):
                    for c in r:
                        f.write("%f " % c)
                    f.write("\n")



            #### radially undistort image and copy to visualize/%08d.jpg
            orig_image = os.path.abspath(data.image_files[image]) #why is dataset.__image_file() method private?
            new_image = os.path.join(output_path, "visualize", base + ".jpg")

            im = cv2.imread(orig_image)
            camera_matrix = np.identity(3)
            camera_matrix[0][0] = camera["width"]*camera["focal"]
            camera_matrix[1][1] = camera["width"]*camera["focal"]
            camera_matrix[0][2] = camera["width"]/2.0
            camera_matrix[1][2] = camera["height"]/2.0
            k1 = camera["k1"]
            k2 = camera["k2"]
            im = cv2.undistort(im, camera_matrix, np.array([k1, k2, 0, 0]))
            cv2.imwrite(new_image, im)

        fvis.close()

        ### options.txt
        with open(os.path.join(output_path, "pmvs_options.txt"), "w") as f:
            f.write("level 1\n")
            f.write("csize 2\n")
            f.write("threshold 0.7\n")
            f.write("wsize 7\n")
            f.write("minImageNum 3\n")
            f.write("CPU 8\n")
            f.write("setEdge 0\n")
            f.write("useBound 0\n")
            f.write("useVisData 1\n")
            f.write("sequence -1\n")
            f.write("timages -1 0 %d\n" % len(shot_index))
            f.write("oimages 0\n");


