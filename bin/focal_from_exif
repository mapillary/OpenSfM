#!/usr/bin/env python2
import os.path, sys
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))

import json
import exifread
import time
import numpy as np
from cv2 import imread

from opensfm.sensors import sensor_data
from opensfm import dataset
from opensfm import exif


def usage():
    print 'USAGE: %s data_set_path' % sys.argv[0]
    sys.exit(0)

if len(sys.argv) > 1:
    path = sys.argv[1]
else:
    usage()

start = time.time()
data = dataset.DataSet(path)
images = data.images()
missing_sensors = {}
camera_models = {}

if os.path.exists(data.data_path + '/exif_overrides.json'):
    with open(data.data_path + '/exif_overrides.json', 'rb') as f:
        exif_overrides = json.loads(f.read())
else:
    exif_overrides = {}

for image in images:
    print 'Extracting focal lengths for image', image

    # EXIF data in Image
    d = exif.extract_exif_from_file(data.load_image(image))

    # Image Height and Image Width
    if not data.config.get('use_exif_size', True) or 1:
        height, width = data.image_as_array(image).shape[:2]
        d['height']  = height
        d['width'] = width

    data.save_exif(image, d)

# camera models
camera_models = {}
for image in data.images():
    d = data.load_exif(image)
    if d['camera'] not in camera_models:
        camera_models[d['camera']] = {
                'width': d['width'],
                'height': d['height'],
                'focal_ratio': d['focal_ratio'],
                'focal_35mm_equiv': d['focal_35mm_equiv'],
                "focal": d['focal_ratio'],
                "exif_focal": d['focal_ratio'],
                "k1": d.get('k1', 0.),
                "k2": d.get('k2', 0.)
            }
data.save_camera_models(camera_models)

end = time.time()
with open(data.profile_log(), 'a') as fout:
    fout.write('focal_from_exif: {0}\n'.format(end - start))
